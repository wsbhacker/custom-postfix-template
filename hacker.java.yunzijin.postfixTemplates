## java.yunzijin ##


## com.hd123.cloud.pay.cloudfund.utils.base.BiCode ##
.issuccessyzj : BiCode.SUCCESS.is()
  com.hd123.cloud.pay.cloudfund.utils.base.BiResult [com.hd123.cloud.pay.cloudfund.utils.base.BiCode] -> com.hd123.cloud.pay.cloudfund.utils.base.BiCode.SUCCESS.is($expr$.code)$END$

.isbicodeyzj : BiCode.xxx.is()
  com.hd123.cloud.pay.cloudfund.utils.base.BiResult [com.hd123.cloud.pay.cloudfund.utils.base.BiCode] -> com.hd123.cloud.pay.cloudfund.utils.base.BiCode.$biCode#1$.is($expr$.code)$END$

.isfailyzj : BiCode.FAIL.is()
  com.hd123.cloud.pay.cloudfund.utils.base.BiResult [com.hd123.cloud.pay.cloudfund.utils.base.BiCode] -> com.hd123.cloud.pay.cloudfund.utils.base.BiCode.FAIL.is($expr$.code)$END$





## com.hd123.cloud.pay.cloudfund.utils.date.DateUtil ##
.startdayyzj : Start of the day of date
  java.util.Date [com.hd123.cloud.pay.cloudfund.utils.date.DateUtil] -> com.hd123.cloud.pay.cloudfund.utils.date.DateUtil.getStartOfDay($expr$)$END$

.enddayyzj : End of the day of date
  java.util.Date [com.hd123.cloud.pay.cloudfund.utils.date.DateUtil] -> com.hd123.cloud.pay.cloudfund.utils.date.DateUtil.getEndOfDay($expr$)$END$





## com.hd123.cloud.pay.cloudfund.utils.Strings##
.ifnotblankyzj : Strings.ifNotBlank(expr, v -> )
  java.lang.String [com.hd123.cloud.pay.cloudfund.utils.Strings] -> com.hd123.cloud.pay.cloudfund.utils.Strings.ifNotBlank($expr$, v -> $END$)

.formatyzj : Strings.format()
  java.lang.String [com.hd123.cloud.pay.cloudfund.utils.Strings] -> com.hd123.cloud.pay.cloudfund.utils.Strings.format($expr$,$END$)

.stringordefaultyzj : Strings.stringOrDefault()
  java.lang.String [com.hd123.cloud.pay.cloudfund.utils.Strings] -> com.hd123.cloud.pay.cloudfund.utils.Strings.stringOrDefault($expr$,$END$)

.oremptyyzj : Strings.orEmpty()
  java.lang.String [com.hd123.cloud.pay.cloudfund.utils.Strings] -> com.hd123.cloud.pay.cloudfund.utils.Strings.orEmpty($expr$)$END$

.connect : Strings.connect()
  java.lang.String [com.hd123.cloud.pay.cloudfund.utils.Strings] -> com.hd123.cloud.pay.cloudfund.utils.Strings.connect($expr$,$END$)




## com.hd123.cloud.pay.cloudfund.utils.AesUtil##
.aesencrypt2yzj : AesUtil.decrypt2()
  java.lang.String [com.hd123.cloud.pay.cloudfund.utils.AesUtil] -> com.hd123.cloud.pay.cloudfund.utils.AesUtil.encrypt2($expr$)

.aesdecrypt2yzj : AesUtil.decrypt2()
  java.lang.String [com.hd123.cloud.pay.cloudfund.utils.AesUtil] -> com.hd123.cloud.pay.cloudfund.utils.AesUtil.decrypt2($expr$)





## com.hd123.cloud.pay.cloudfund.utils.Lists##
.convertyzj : Lists.convert(expr, e -> )
  java.util.List [com.hd123.cloud.pay.cloudfund.utils.Lists] -> com.hd123.cloud.pay.cloudfund.utils.Lists.convert($expr$, e -> $END$)

.optconvertyzj : Lists.optConvert(expr, e -> )
  java.util.List [com.hd123.cloud.pay.cloudfund.utils.Lists] -> com.hd123.cloud.pay.cloudfund.utils.Lists.optConvert($expr$, e -> $END$)

.firstyzj : Lists.first()
  java.util.List [com.hd123.cloud.pay.cloudfund.utils.Lists] -> com.hd123.cloud.pay.cloudfund.utils.Lists.first2($expr$);

.lastyzj : Lists.last()
  java.util.List [com.hd123.cloud.pay.cloudfund.utils.Lists] -> com.hd123.cloud.pay.cloudfund.utils.Lists.last($expr$);

.streamyzj : Convert List to safe stream
  java.util.List [com.hd123.cloud.pay.cloudfund.utils.Lists] -> com.hd123.cloud.pay.cloudfund.utils.Lists.stream($expr$)$END$
  ARRAY [com.hd123.cloud.pay.cloudfund.utils.Arrays] -> com.hd123.cloud.pay.cloudfund.utils.Arrays.stream($expr$)$END$

.distinctyzj : distinct
  java.util.List [com.hd123.cloud.pay.cloudfund.utils.Lists] -> com.hd123.cloud.pay.cloudfund.utils.Lists.distinctBy($expr$, e -> $END$)

.sizeyzj : size
  java.util.List [com.hd123.cloud.pay.cloudfund.utils.Lists] -> com.hd123.cloud.pay.cloudfund.utils.Lists.size($expr$)$END$




## com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum##
.datetimeyzj : yyyy-MM-dd HH:mm:ss
  java.util.Date [com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum] -> com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum.YMD_HMS.format($expr$)
  java.lang.String [com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum] -> com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum.parseToDate($expr$)

.dateyzj : yyyy-MM-dd
  java.util.Date [com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum] -> com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum.YMD.format($expr$)
  java.lang.String [com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum] -> com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum.parseToDate($expr$)

.datetimesyzj : yyyy-MM-dd HH:mm:ss.SSS
  java.util.Date [com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum] -> com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum.YMD_HMS_S.format($expr$)
  java.lang.String [com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum] -> com.hd123.cloud.pay.cloudfund.utils.DateConverterEnum.parseToDate($expr$)





## com.hd123.cloud.pay.cloudfund.utils.MyObjects ##
.ordefaultyzj : MyObjects.orDefault(T,() -> T)
  ANY [com.hd123.cloud.pay.cloudfund.utils.MyObjects] -> com.hd123.cloud.pay.cloudfund.utils.MyObjects.orDefault($expr$, () -> $END$)

.ifnotnullyzj : MyObjects.ifNotNull(expr,v -> )
  ANY [com.hd123.cloud.pay.cloudfund.utils.MyObjects] -> com.hd123.cloud.pay.cloudfund.utils.MyObjects.ifNotNull($expr$, v -> $END$)

.nullablematchyzj : null to true or false
  NOT_PRIMITIVE [com.hd123.cloud.pay.cloudfund.utils.MyObjects] -> MyObjects.nullableMatch($expr$, v -> $END$)

.notnullmatchyzj : null to false or true
  NOT_PRIMITIVE [com.hd123.cloud.pay.cloudfund.utils.MyObjects] -> MyObjects.notnullMatch($expr$, v -> $END$)
  





## com.hd123.cloud.pay.cloudfund.api.base.RSResp ##
.okrespyzj : RSResp.ok()
  ANY [com.hd123.cloud.pay.cloudfund.api.base.RSResp] -> return com.hd123.cloud.pay.cloudfund.api.base.RSResp.ok($expr$);

.errorrespyzj : RSResp.err()
  ANY [com.hd123.cloud.pay.cloudfund.api.base.RSResp] -> return com.hd123.cloud.pay.cloudfund.api.base.RSResp.err($expr$);




## com.hd123.cloud.pay.cloudfund.exception.BizException ##
.bizerrorthrowyzj : throw BizException.of()
  java.lang.String [com.hd123.cloud.pay.cloudfund.exception.BizException] -> throw BizException.of($expr$);$END$ 
  com.hd123.cloud.pay.cloudfund.api.base.exception.ApiErrorCodeEnum [com.hd123.cloud.pay.cloudfund.exception.BizException] -> throw BizException.of($expr$);$END$ 
  java.lang.Throwable [com.hd123.cloud.pay.cloudfund.exception.BizException] -> throw BizException.of($expr$);$END$ 

.bizerroryzj : BizException.of()
  java.lang.String [com.hd123.cloud.pay.cloudfund.exception.BizException] -> BizException.of($expr$)$END$ 
  com.hd123.cloud.pay.cloudfund.api.base.exception.ApiErrorCodeEnum  [com.hd123.cloud.pay.cloudfund.exception.BizException] -> BizException.of($expr$)$END$ 
  java.lang.Throwable [com.hd123.cloud.pay.cloudfund.exception.BizException] -> BizException.of($expr$)$END$ 





## org.apache.commons.collections4.CollectionUtils ##
.isemptyzyj : QueryResult.data is empty
  com.hd123.rumba.commons.biz.query.QueryResult [org.apache.commons.collections4.CollectionUtils] -> org.apache.commons.collections4.CollectionUtils.isEmpty($expr$.getRecords());$END$






## com.hd123.cloud.pay.cloudfund.utils.common.collection.CollectionUtils ##
.ifnotemptyyzj : Collection
  com.google.common.collect.ImmutableSet [com.hd123.cloud.pay.cloudfund.utils.common.collection.CollectionUtils] -> com.hd123.cloud.pay.cloudfund.utils.common.collection.CollectionUtils.ifNotEmpty($expr$, v -> $END$)
  com.google.common.collect.ImmutableList [com.hd123.cloud.pay.cloudfund.utils.common.collection.CollectionUtils] -> com.hd123.cloud.pay.cloudfund.utils.common.collection.CollectionUtils.ifNotEmpty($expr$, v -> $END$)
  java.util.List [com.hd123.cloud.pay.cloudfund.utils.Lists] -> com.hd123.cloud.pay.cloudfund.utils.Lists.ifNotEmpty($expr$, v -> $END$);
  java.util.Collection [com.hd123.cloud.pay.cloudfund.utils.common.collection.CollectionUtils] -> com.hd123.cloud.pay.cloudfund.utils.common.collection.CollectionUtils.ifNotEmpty($expr$, v -> $END$)





## com.hd123.cloud.pay.cloudfund.api.base.util.bean.EnumMatch ##
.matchyzj : EnumMatch.match()
  com.hd123.cloud.pay.cloudfund.api.base.util.bean.EnumMatch -> $tyep*:expressionType(expr)$.$END$.match($expr$)


## com.hd123.cloud.pay.cloudfund.utils.Collections ##
## com.hd123.cloud.pay.cloudfund.utils.MyObjects ##

.mapyzj : Collections,MyObjects
  java.util.Collection [com.hd123.cloud.pay.cloudfund.utils.Collections] -> com.hd123.cloud.pay.cloudfund.utils.Collections.map($expr$, v -> $END$)
  NOT_PRIMITIVE [com.hd123.cloud.pay.cloudfund.utils.MyObjects] -> MyObjects.map($expr$, v -> $END$)




.optmapyzj : Collections.optmap
  java.util.Collection [com.hd123.cloud.pay.cloudfund.utils.Collections] -> com.hd123.cloud.pay.cloudfund.utils.Collections.optMap($expr$, v -> $END$)







## com.hd123.cloud.pay.cloudfund.utils.OptWrapper ##

.optwrapperyzj : OptWrapper
  java.util.Optional -> com.hd123.cloud.pay.cloudfund.utils.OptWrapper.of($expr$)$END$
  NOT_PRIMITIVE -> com.hd123.cloud.pay.cloudfund.utils.OptWrapper.ofNullable($expr$)$END$



## com.hd123.cloud.pay.cloudfund.param.bill.zx.BillChannelEnum ##

.parseyzj : BillChannelEnum
  com.hd123.cloud.pay.cloudfund.api.front.consts.PayChannelEnum [com.hd123.cloud.pay.cloudfund.param.bill.zx.BillChannelEnum] -> BillChannelEnum.parseBy($expr$)$END$
  com.hd123.cloud.pay.cloudfund.api.front.consts.TakeOutOrderTypeEnum [com.hd123.cloud.pay.cloudfund.param.bill.zx.BillChannelEnum] -> BillChannelEnum.parseBy($expr$)$END$


.optparseyzj : BillChannelEnum
  com.hd123.cloud.pay.cloudfund.api.front.consts.PayChannelEnum [com.hd123.cloud.pay.cloudfund.param.bill.zx.BillChannelEnum] -> BillChannelEnum.optParseBy($expr$)$END$
  com.hd123.cloud.pay.cloudfund.api.front.consts.TakeOutOrderTypeEnum [com.hd123.cloud.pay.cloudfund.param.bill.zx.BillChannelEnum] -> BillChannelEnum.optParseBy($expr$)$END$


.iftrueyzj
  BOOLEAN -> [com.hd123.cloud.pay.cloudfund.utils.Booleans] -> Booleans.ifTrue($expr$, () -> $END$);
.iffalseyzj
  BOOLEAN -> [com.hd123.cloud.pay.cloudfund.utils.Booleans] -> Booleans.ifFalse($expr$, () -> $END$);
  
.unboxyzj
  BOOLEAN -> [com.hd123.cloud.pay.cloudfund.utils.Boxing] -> Boxing.toBool($expr$)$END$
  INT -> [com.hd123.cloud.pay.cloudfund.utils.Boxing] -> Boxing.toInt($expr$)$END$

.indexforeachyzj
  java.util.List [com.hd123.cloud.pay.cloudfund.utils.Lists] -> Lists.indexForeach($expr$, (i, e) -> $END$);


.sandboxyzj
  ANY [com.hd123.cloud.pay.cloudfund.utils.common.SandBox] -> SandBox.run2(() -> $expr$$END$);
